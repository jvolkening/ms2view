#!/usr/bin/perl

#############################################################################
# embedded files
#############################################################################

package ms2view::Embed;

$ui = <<XML;
<ui>
  <menubar name="MenuBar">
    <menu name="FileMenu" action="FileMenu">
      <!--
      <menuitem name="Load_I" action="Load_I" />
      <menuitem name="Load_N" action="Load_N" />
      <menuitem name="Save" action="Save" />
      <separator />
      -->
      <menuitem name="Quit" action="Quit" />
    </menu>
    <menu name="EditMenu" action="EditMenu">
      <!--
      <menuitem name="Grid_M" action="Grid_M"/>
      <menuitem name="Grid_A" action="Grid_A"/>
      <menuitem name="Grid_L" action="Grid_L"/>
      <separator />
      -->
      <menuitem name="Prefs" action="Prefs" />
    </menu>
    <menu name="ViewMenu" action="ViewMenu">
      <!--
      <menuitem name="Show_Grid" action="Show_Grid"/>
      <menuitem name="HL_Used" action="HL_Used"/>
      <separator />
      <menuitem name="Zoom_In" action="Zoom_In"/>
      <menuitem name="Zoom_Out" action="Zoom_Out"/>
      <menuitem name="Zoom_Fit" action="Zoom_Fit"/>
      <menuitem name="Zoom_100" action="Zoom_100"/>
      -->
    </menu>
    <menu name="HelpMenu" action="HelpMenu">
      <menuitem name="About" action="About"/>
    </menu>
  </menubar>
</ui>
XML

$icon_B2B_16 = <<PNG;
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz
AAAN1wAADdcBQiibeAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAADASURB
VDiNpZPBDYMwDEWf067TLsClR3Yoc/SKI3FiDtihC7AAnYYDuBdaEZpIFL5kyZKTp287ETPjqBSw
naEyJ7t1Brg/ntHiq2vouwZVpSzLoOa9R1URwFKAJSQ2KxEh2cI1K7hkBQBtnX8BIhLkDsDMglBV
+q6JOlo7cbFD637XtpOAdfFvB/88qqqqgHmNSwcpiHMuiGEYfgGpy6k1t3UeH+LH3hYJYCIStbdF
pxlyMzOmaWIcx82XAS9Hv/MbCXls+cixbw4AAAAASUVORK5CYII=
PNG

$icon_ch_white = <<PNG;
iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAAAXNSR0IArs4c6QAAAAZiS0dEAAAA
AAAA+UO7fwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB90EFxMwAJscR20AAAAZdEVYdENv
bW1lbnQAQ3JlYXRlZCB3aXRoIEdJTVBXgQ4XAAAALUlEQVQ4y2NgIAD+////n5AaJgYqgFFDBrMh
jITSASMjIyMxaWU0sY0aQggAAMpCEBLL4xSxAAAAAElFTkSuQmCC
PNG

$icon_ch_green = <<PNG;
iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAABmJLR0QA/wD/AP+gvaeTAAAACXBI
WXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gEUFQwjEsRhYgAAABl0RVh0Q29tbWVudABDcmVhdGVk
IHdpdGggR0lNUFeBDhcAAAAtSURBVDjLY2AgACL+y24mpIaJgQpg1JDBbAgjoXSwgvGxLzFpZTSx
jRpCCAAAiWsKk6T5wbEAAAAASUVORK5CYII=
PNG

$logo_16 = <<PNG;
iVBORw0KGgoAAAANSUhEUgAAACgAAAAQCAYAAABk1z2tAAAACXBIWXMAAAMLAAADCwFQ+JtoAAAA
GXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAetJREFUSMfl1UFo13UYx/HXZ3OQ
M1wLIZbR5qEWTAQXy0I0OygUIh0qaCump3lp2EFopIfsUlCH6KIiiEJQdA1kBn9330Um0cHEQZQo
BQWrQS6eLr9wxIK/EPQXH/jy5fk+Dx/efB4evqpKVeHrPlqf/J13yumyRiRzm3RIdK39XB91OGDn
xL0NmLT2dbiDGf+/AdclrUFsxjcdOuKuAWy7b5YkyUCS/Um2/Et9R5K+/xQwmZtM5h5oA64fM9iA
M0mG12jruRtj1rXXtryTN59Kfh5EC1sxiPcxhmfRjSNVNd3APo7RJIeq6p0k3TiJb3EjyQHswjI+
x0hVnU7yMS5W1WySk20C/tbLMx9y4SdcxhPYjoN4EoeranGVkxvxPF7FZJIHsRPX8Rgexb6qmkjy
Bp7G3iTnMYRXkixgfZtW9y7z7q2q+hVXq2oFN7EehzGT5GySDQ3MGbxdVcv4Ai9jHOcawSFsSfJB
M41r+BP78RUewl7Mtulgz8rqj/ofxV+qairJCezBBI5V1dWm/iXOY6WqfkgCi/gd7+EP9GIYR/FS
AziNF8P24wz20fqe10c4dZm3xvh0/s49NcpnCyyt4AVcahZhBA+jH0u4gudWwX+HeezGj00+2jj2
SDPaNHq3m3y20dxWVa/9BWr+9ivqHoPgAAAAAElFTkSuQmCC
PNG

$logo_24 = <<PNG;
iVBORw0KGgoAAAANSUhEUgAAADsAAAAYCAYAAABEHYUrAAAACXBIWXMAAASRAAAEkQGnQ+TWAAAA
GXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAA0FJREFUWMPt2G+o32MYx/HX5xw2
ttkWZvlzMsaSf0eMiNK28kBIeTR/l0iIUh4oSh4oj9TYNGJRkmlKs4axzs5myjBqJv9Ch/PAn7HW
bJizywO3HKex5VfCzv3k+73u73Xf3/t9X5/r+v5JVRnekr4leKRq1ir/s9ZlH2p/CZusmpqsPGwf
iWzXtYy5alTGo7CjsKOw/2rYpK836btpH4lsHUGdMyrj/xJssnpF8sqkfSRnazrZb7RAjcJ23pLM
SXJnkhuTHLoH3zFJ5ifZ/x+HTVZPSFZf1wHoAtzTzNOwMcnUPaxzHNIJ7N/M050T6b41yTM4A19W
1XtJDsTp2FFVGxpYF2ZiMj6qqk9xN76t9jGd5HhcmOTt5vP9sI3pxWdYhJ9b30Scie+qakOSgzGl
qj5o1yfhmKp6p9ljcVIHMt4+AS/jeqxLch9exc14Nsn9ScbgNdyHy7E8yalVtbn++NdgPL5pfvOG
gU5vc47DmxiT5FxswjV4OMlSTEN/kt8ifws2JDm62bPxaAcVeOdYzKqq7UmuxmOYXlUDSU7FWixs
Czmyqob+RNLnYQr6GvStbRxciaXYNmzIItxcVcuSdON9HNYkfmLbiEuxAhdjQYNd2UFkD/i+qrY3
4xMMVNXAMHsivsBbWJ/kipEFJsmxeALzqmobnsMJSWY0l7l4fNiQQ3AyZjUl3YtdOAWrMDtJT9u8
hQ0W5mBlB5Hd7+cRHT/s7h0TF+EC3I67k8yuqi/aolbgtqpaA1X1Q5IlmJvkBeyPNZjQ5hvbjm9g
Zzt/C+/ia1zS4J9vSnkyyTQch3UdwKb26o3619x8CS+1gnZZkqexHHdU1bIRQx7HYkzCE1VVv6ei
LxvUYFX1j1DJ1pbzXXiwbVw/7sSaqvqxA9iuXXvhNCPJDVjfojQT89GPrTg7ydnNd7CqHqyq11uh
uQJnjZhvCHfhqSTz8R168UBVfZhkc7vHmua/DA/hDi2pF3NJDy8O8tMuzp/Kx1sZ3EHv5F9VsXEL
PeOYNoG1XzG+m1lHsPzzYdX0SHw47Ll4Uise01qUhjCAzS3H7CYNPmrnh+Og3cy3qcl0Co5q/Vva
o2kIPehu9m+yn9EK2vpfAGh7FguBMJbhAAAAAElFTkSuQmCC
PNG

$logo_32 = <<PNG;
iVBORw0KGgoAAAANSUhEUgAAAE8AAAAgCAYAAABTliUJAAAACXBIWXMAAAYXAAAGFwGWaOmZAAAA
GXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAABHVJREFUaN7tmn1olWUYxn/XOdts
Y0vG5qRsKzKKPqCiHNWaptOghWRM+3Blf0SZpMQkhKAvIgikqAibUWxlLbVVCk1L5zYb6ExyDfoS
NCeRitYkqs3c2bz7Y/epl5ez2caRJr03PLyH57nv53nf67nu637ec47MjLBJ7dfCYCckcs1u7SWy
lBaLIIjAG9/gSS3l0vbCCLIxMS+2Abg5gixK2wi8CLwIvAi8yCLwzgLwpO2vSW3P/Z/Byxh7qE0C
FDEvsrGDJ+3Ik1omR3CMiXn9SyC+IYIjStsIvAi86Kjy35qkUuAu4ALgJ+BDM9s1ivj1wNdm9vy4
ZZ60rURqnZVm4FYDO4ErgB7gBmCnpCWjmCYPyBnnzMuYA7YCuCyN99cC1JnZ7gCga4EXJK22VL9e
hY/yZpVnieaZJJVJWiPpU0krJRVIypH0hKQmSe9Lmh8AI0/SckmNPr5K0lx/8MYgcG7bgInAFPet
SsHYcklvSCqS9IykRYGxqZJelrRZ0tuSZnh/paRaSRkB38k+z6LQ/AskvZhm8HrPBRo8xfYDjwKb
gK3ALKALKAAaJd3jQZuAZcB3wJfAecD9IyxyIfA7cBQoAVK9Xy8HZpjZMWA+kARoGtAJXAfs8nRu
lXQfcBJ4xMeSdgfwEPBkaP7HgEvTXDAGsoBSM/vRb3Yf8Cqwzszu9T45iNWSWoByoMrMPv4XGljk
D1hrZglJ9cBHkq4xsy73yQduA55KMcXrvkGzkykvqQ54CbgY6PNN/sL95wEbgTslXW5m30vKBUqB
mjQzb0JfEji3PX5dH9AgA77y6vmrV9CnJd10GuAygXec1c96dxPwM1AdcL0biAPvheJLgOuB+pBW
fgIUAZcA7cDMpJz45zrgIDDX/acDmcCWNIMXHwh1JPx6LNTfD2SYWcJvpgfYIWmPpGpJ8dCDx4E1
wFVApZmd8I3oB9YCCwMx1cBnZnYktGaJX9+VZMkGJBlf4PJSJmmCs9eANmBzALwK4ICZ7U8zeLFT
wwycGqEadptZhWvNXgepMQBcDHgLuAWYY2bdoSnqgfOBmZIuAsq8j2E28kFgaorWATS7Dpa63m01
s15n542SCp2NW87AIXlY8E5fp806XQd3A69IKvaUXuUsqDCzvSniuiR1ebr+4CxuSrHEPgew2MwO
DCMN3wKHPRtmAyt8qM31cAFwdbJIpZl5slF5Dx1TpqU4eyaA40Ctv13MAw5Lyg+0nBD7bne/Bk/n
MMjHgQ+AGknTg1oqqSygx83AQiDfGYeZnfSUXgYMAq1n4vXMRumfB3RI+sWZUeDC/bgXlMXu15Ei
9k3gYf/cAKz0Y87iEdZbChQCn0s6BPzhWtgNXOk+zcADQLMDHiwsVUC7mf0GQ1+jfwMT45ATgyOu
C1mCKZlwsP8fPIqzoGcA+jw1J2UMSVmPF4nc2NA8hxKhQ3g28Kfv2N9l2cdO+AbmeIUc9PQYCMQO
ey7ys1nSsj0m/Je4bNfcoO853pJa2BfY+OS6CS9s4WfZaGY1AH8B9strY5QPjE0AAAAASUVORK5C
YII=
PNG

$logo_48 = <<PNG;
iVBORw0KGgoAAAANSUhEUgAAAHcAAAAwCAYAAAArZOVeAAAACXBIWXMAAAkjAAAJIwFPvWgBAAAA
GXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAByNJREFUeNrtnHuQ1lMYxz/f3VUU
pRKWVG6VEnLLtcsWMkhpZIg/kNxvMyb5w4zGGMMYMYZhyObahNYl93bft1ySdY0ym0SJQlkkpdrd
xx/7/PTz83vf3UQv6zwzvznvOc85z3N+53ueyznvvK/MjHwkzRoElgUmmw0eS6D/DBWFJQjgBgrg
BgrgBtoqVLIlg6XsaaCOsLLc7PT6sJwtynLtBrD7YbvWYSmDWw4UwA0UwA0UwA3gBgrgBgrgBgrg
BgrgBvpLVPJPCJUy3YCDoWS+2YBFYZlblOUWHQeqgLpRYYmDWw4UwA0UwA0UwP3fgCtlx0uzKjzT
DdSyLFdHgI0Eax+WJbjlQAHcQAHcQAHcQAHcgpGkYkknStotgLv1F7+7pFskLZC0VpJJWibpYUl9
/gYVlwMvArMCuFsP1BJJNwILgfFAT+B74GugC3AO8K6kU7ZQVatE+f8BV8qukrKF+BpwB+AswICJ
QKmZ7WFmXYDuQBbYFpgiaUvO+nf6Rjmh0OCWFEBnW2D91lZqZj9IGg5sNLNPE7ylkkYDS4GODswT
f1HPeuDRf4O3KimkckkHAKcCu7uLnA1UmlmD8zsDo4D9gGLgU2CamX2bIqsfMBjo6k1fAp8AGTPb
4Au/IA8oqyTVAAcD3SR1BYa5pZebWV2Od+gAnO7VJ4BdgIHASjN7OhkagJNdRydgBfCCmX0Q63Om
e5nZZrYwRd/x7mm+N7PpKfw9gBOBDZgZjb+uz1ZAxqDygKjN2wc1tmceiLc38qo+auTNaJMYM7ax
vWrCn8dk1kHlN8AdQIMvXvx5CWjtLnR1Cn81MGSTPDoDM1P6Rc8qYMfkPNIeYJ6PGQu0B9Z6fVie
MZd5n2W+Ac/3enWi34HA4hxznAa09X4V3nZ7iq4iYLnzfwV2SOlzrfOzBUqofmkHjANuBo5zN3iX
gz0MmApMAeYCZ7glnAcs8V39sKQoYbkbGAp8DIwBDnMLvsAXaqaZ/dgML9IB6OXVuWb2E/Cs18/O
MzTilZtZfQ7ZewOvAXsBzwMjgEM8Ni8BRgOTvfurXg5JEdUfKAXq3ADS4nrZ73IKY7lPrwfOTtl1
98R2cxYoSvB7AhudP9Db1ni9d3OsM48FTnQ5b8Xajve2X4DtU8bs4xuyAdjb2/5kuX40MuAxQAkZ
vRwsA450l2sus3Oi763Om+LlQwl+q9h69CuQ5RbVuytK0jOxz7dFsTcWFxcCNV7d18tfveyzBbH/
cHdndcCVMValx+42wMgcViuPj4tzyN4tZmETLPEPM2ZW46EIYLSZLQE+c7mDE+JGeDkJqAdOklQc
4x/lCeu3wIcFAneb9Wa2MYWxIvb5wxyDl3vZxssoM50qaZKk7psJ7D6+qVoD15lZdWzhG4BH8rjm
MyOXnEdFmcfKL4E1kjokH+Bz77tfwjUPjs1zf9/QC8xsHvCOJ2VHx3RFrvxVM7MCgVuc61f4kaUa
8E0TfeTleOBer18FLJb0rKRBzQC2iy9kKXCnmd2W0m2yz2eopN1jY48CergbrMijptTLrkBtjucK
77NTAtyymJxTvYys/AUvh6eBW8AbKjU00aEhV3KScoTZYGYXe+y6x930cCAr6W1JvXMAWwpUAXsC
9wFX55D/BfCGr9UZKYnUVDNb08TlCe4qn2ziqfK+Wc8tevgGjLvk6Hg1Iw6upHaeTFoEboHOubJ/
4JJiEXCppOuBC4FrgMOBjKTeZlYbA3ZXIOOWVw5cYvn/be1B4FgH9HZJ23iGiyc3+WhldO42s9HN
fJfVkua6zoGSsp5dr/ATBGY2T9JSYF9JPdxllwDvm9l3LfJu2cxqzexm4FDgO79UGBEDdmc/F/dy
lzs2mbil0FPufvtJ6ukJUiegxszmNDE2umrtI2m7zXiVyDUP8OOigGcSc42sd1gsPr9S4C8O/n7L
zeFO3/Rqx9iNVxWwP3A/MK4ZwOJu90mvjozdSE1pxlQyHlfb+Nl7c8E9zM/5cZcc0XNeDgSOaHHg
SpoQi0vJLHiAV+clgH0MmAC0T8te/SlOiIyAjC5d6mKZdN6cALjJq7dIOk9SUWKuO0o6N5Hpv+dX
sn2AQb5BZiXEzwZ+8oz5QOBnYE5LstyJwBJJH0ia5t/LZvxeuZPfCFUCFwF9fcwYX7jaPM9BCT2v
+/mzzF39y2a2vJlznORxe1sPBSskZSW9LmmRh48HXW60Kep9M7bypG9G8vjoG+dlH7e936P/3qdE
0jGNH++thZ2rYXJPaWi7TSLGdINR1bBsrVR2zB/n/MhiaLsOxvWXVsUUX9sO+lfD/FbSkMSY6e/C
hnWb9P6Buvnua8jBxxfoZ6CL9yn368e+MUDqga8c2Om+s3f1cc2lvikxcmYMgDlNvENxgl8OfOFu
/SC3xmiuS/16smNiTE3sXD8/h76PPfGKLl02mZCnzoFaBo0xs8ejym/giLnP2MUKLgAAAABJRU5E
rkJggg==
PNG

$logo_64 = <<PNG;
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
PNG


package main;

use strict;
use warnings;
use 0.512;

use FindBin;
use Getopt::Long;
use Gtk3 '-init';
use Glib qw(TRUE FALSE);
use Gtk3::SimpleList;
use List::Util;
use MIME::Base64 qw/decode_base64/;
use Time::Piece;
use PerlIO::gzip;

use MS::Mass qw/:all/;
use MS::Reader::MzML;
use MS::Reader::PepXML;
use MS::PepInfo qw/calc_fragments/;
use MS::CV qw/:MS/;

use lib $FindBin::Bin;
use Gtk3::MassCanvas;

# constants
use constant ZI => 1.25;
use constant ZO => 0.80;

# globals
my $NAME    = 'ms2view';
my $VERSION = '0.004';

my $gobjs   = {};
my $embedded = get_embedded();

my $fn_raw;
my $fn_ids;
my $fn_crux;
my $fn_pepxml;
my $fn_hardklor;
my $guess_spectrum_id = 0;
my $fdr;
my $ms2_tol = 0.5;
my $tol_type = 'amu';

GetOptions(
    'raw=s'      => \$fn_raw,
    'pepxml=s'   => \$fn_pepxml,
    'ids=s'      => \$fn_ids,
    'crux_ids=s' => \$fn_crux,
    'hardklor=s' => \$fn_hardklor,
    'guess_ids'  => \$guess_spectrum_id,
    'fdr=f'      => \$fdr,
    'ms2_tol=f'  => \$ms2_tol,
    'tol_type=s' => \$tol_type,
);

my $parser = MS::Reader::MzML->new;
my $pep_p  = MS::Reader::PepXML->new();

my $main_canvas;
my $tic_canvas;
my $other_canvas;
my $list;
my $ms1_hid;
my $xic_lid;
my %mods;
my %charges;
my %peptides;
my $mz_min;
my $mz_max;
my $tic;
my $bpc;

# initialize GUI
my $mw = _build_ui();

if (defined $fn_raw) {
   
    $parser->load( $fn_raw );

    $mz_min = $parser->get_app_data($NAME, 'mz_min');
    $mz_max = $parser->get_app_data($NAME, 'mz_max');

    if (! defined $mz_min || ! defined $mz_max) {

        while (my $s = $parser->next_spectrum(filter => [MS_MS_LEVEL, 1])) {

            my $low  = $s->param(MS_LOWEST_OBSERVED_M_Z);
            my $high = $s->param(MS_HIGHEST_OBSERVED_M_Z);

            if (! defined $low || ! defined $high) {
                my $mz = $s->mz;
                $low  = $mz->[0];
                $high = $mz->[-1];
            }

            $mz_min = $low  if (! defined $mz_min || $low  < $mz_min);
            $mz_max = $high if (! defined $mz_max || $high > $mz_max);

        }

        $parser->set_app_data($NAME, 'mz_min' => $mz_min);
        $parser->set_app_data($NAME, 'mz_max' => $mz_max);

    }

    $parser->goto_spectrum(0);
    my $scan = $parser->fetch_spectrum(0);
    load_scan( $scan );

    $tic = $parser->get_app_data($NAME, 'tic');
    $bpc = $parser->get_app_data($NAME, 'bpc');

    if (! defined $tic) {
        $tic = MS::Reader::MzML::Chromatogram->new(type => 'tic', raw => $parser);
        $parser->set_app_data($NAME, 'tic' => $tic);
    }
    if (! defined $bpc) {
        $bpc = MS::Reader::MzML::Chromatogram->new(type => 'bpc', raw => $parser);
        $parser->set_app_data($NAME, 'bpc' => $bpc);
    }
    $tic_canvas->load_chrom($tic);
}
if (defined $fn_pepxml) {
    load_list( $fn_pepxml );
}
elsif (defined $fn_ids) {
    load_list( $fn_ids, 1 );
}
elsif (defined $fn_crux) {
    load_list( $fn_crux, 2 );
}
Gtk3->main;




#----------------------------------------------------------------------------#
# SUBROUTINES
#----------------------------------------------------------------------------#

sub cb_click {

    my ($i,$val) = @_;
    my $idx = $parser->find_by_time($val => 1);
    my $scan = $parser->fetch_spectrum($idx);
    $parser->goto_spectrum($idx);
    $tic_canvas->{title} = "clicked $val";
    load_scan($scan);

}

sub load_list {

    my ($fn, $type) = @_;
    return if (! defined $fn);
    my %seen;
    %mods = ();
    %charges = ();
    %peptides = ();
    if ($type eq 1) {
        open my $in, '<', $fn;
        PSM:
        while (my $line = <$in>) {
            chomp $line;
            my (
                $id,
                $pre,
                $pep_mod,
                $pep,
                $mz,
                $score,
                $n_match,
                $p,
                $z,
                $mod_string,
            ) = split "\t", $line;
            next PSM if (defined $fdr && $score > $fdr);
            my @m = split ',', $mod_string;
            $mods{$id}     = \@m;
            $charges{$id}  = $z;
            $peptides{$id} = $pep;
            push @{$list->{data}}, [$id,$pep];
        }
    }
    elsif ($type eq 2) {
        my $in;
        if ($fn =~ /\.gz$/) {
            open $in, '<:gzip', $fn;
        }
        else {
            open $in, '<', $fn;
        }
        my $h = <$in>;
        PSM:
        while (my $line = <$in>) {
            chomp $line;
            my (
                $fid,
                $scan,
                $z,
                $pre,
                $spec_mass,
                $pep_mass,
                $score,
                $q,
                $err,
                $n_match,
                $pep,
                $protein,
                $flanking,
            ) = split "\t", $line;
            next PSM if (defined $fdr && $q > $fdr);

            # if native ID not defined, either guess or use scan number
            my $id //= $guess_spectrum_id
                ? "controllerType=0 controllerNumber=1 scan=$scan"
                : $scan;

            #parse mods;
            my @mods;
            my $offset = 0;
            while ($pep =~ /\[(.+?)\]/g) {
                my $mod = $1;
                my $pos = $-[0] - $offset;
                $offset += length($mod)+2;
                #$pos = 1 if ($pos == 0);
                
                if ($mod =~ /UNIMOD:(\d+)/) {
                    my $id = $1;
                    my $name = mod_id_to_name($id);
                    $mods[$pos] = mod_mass($name, 'mono');;
                }
                else {
                    die "Can't parse mod format\n";
                }
            }

            my $pep_plain = $pep;
            $pep_plain =~ s/\[.+?\]//g;
            while (scalar @mods < length($pep_plain)+2) {
                push @mods, 0;
            }

            $mods{$id}     = \@mods;
            $charges{$id}  = $z;
            $peptides{$id} = $pep_plain;
            push @{$list->{data}}, [$id,$pep];
        }
    }
    else {
        $pep_p->load($fn);

        for (0..$pep_p->n_lists()-1) {

            $pep_p->goto_list($_);

            PSM:
            while (my $spectrum = $pep_p->next_result) {
                my $z    = $spectrum->{assumed_charge};
                my $scan = $spectrum->{start_scan};
                my $id   = $spectrum->{spectrumNativeID};

                # if native ID not defined, either guess or use scan number
                $id //= $guess_spectrum_id
                    ? "controllerType=0 controllerNumber=1 scan=$scan"
                    : $scan;

                my $hit = $spectrum->get_hit(0);
                if (defined $hit) {
                    my $pep = $hit->{peptide};
                    my $q   = $hit->{search_score}->{percolator_qvalue}->{value}
                        // 1;
                    next PSM if (defined $fdr && $q > $fdr);
                    my $m = $spectrum->mod_delta_array;
                    $mods{$id}     = $m;
                    $charges{$id}  = $z;
                    $peptides{$id} = $pep;
                    push @{$list->{data}}, [$id,$pep];
                }
            }
        }
    }
}


sub clean_quit {

    Gtk3->main_quit;
    return FALSE;
    
}

sub _build_ui {

    # set up the main window
    my $mw = Gtk3::Window->new('toplevel');
    $mw->signal_connect('delete_event' => \&clean_quit );
    $mw->set_default_size(900, 500);
    $mw->set_title("$NAME v$VERSION");

    ## Set up icon theme
    for (16,24,32,48,64) {
        Gtk3::IconTheme::add_builtin_icon( 'logo', $_, $embedded->{"icon_$_"} );
    }
    Gtk3::Window::set_default_icon_name( 'logo' );

    # build menubar and toolbar
    my $vbox_main = _return_framework($mw);
    
    # Next we put together the main content
    $mw->add($vbox_main);

    $mw->signal_connect( 'key-release-event' => sub {
        
        if ($_[1]->keyval == 98) { # 'b'
            $tic_canvas->load_chrom($bpc);
        }
        elsif ($_[1]->keyval == 116) { # 't'
            $tic_canvas->load_chrom($tic);

        }
        elsif ($_[1]->keyval == 115) { # 's'
            my $fn = get_filename('Select location to save PNG', 'save');
            $mw->get_focus()->save_to_png($fn)
                if ($fn);
        }
        elsif ($_[1]->keyval == 65289) { # 'TAB'
            my @can = ($tic_canvas, $main_canvas, $other_canvas);
            for (0..$#can) {
                if ($can[$_]->has_focus()) {
                    my $new_focus = $can[ ($_+1)%3 ];
                    $mw->set_focus($new_focus);
                    last;
                }
            }
            $tic_canvas->load_chrom($tic);

        }
        elsif ($_[1]->keyval == 65056) { # 'Shift-TAB'
            my @can = ($tic_canvas, $main_canvas, $other_canvas);
            for (0..$#can) {
                if ($can[$_]->has_focus()) {
                    my $new_focus = $can[ ($_+2)%3 ];
                    $mw->set_focus($new_focus);
                    last;
                }
            }
            $tic_canvas->load_chrom($tic);

        }
            #$t_btn_go->signal_emit('clicked');
        #}
        #return TRUE;
    });

    $mw->show_all();
    return $mw;
    
}

sub _return_framework {

    my $mw = shift;


    my $vbox = Gtk3::VBox->new(FALSE,0);
    
    # define menu structure
    my @menu_actions = (
        # name         stock id           label
        [ "FileMenu",  undef,            "_File" ],
        [ "EditMenu",  undef,            "_Edit" ],
        [ "ViewMenu",  undef,            "_View" ],
        [ "HelpMenu",  undef,            "_Help" ],
        # name         stock id           label          accelerator   tooltip      callback
        #[ "Load_I",   'gtk-open',        "_Load image", "<control>O", "Load image", sub{_load_image()}  ],
        #[ "Load_N",   'gtk-open',        "_Load NDF",    undef,       "Load NDF",   sub{ _load_ndf()}   ],
        #[ "Save",      undef,            "_Save .pair",  undef,       "Save",       \&print_pair        ],
        [ "Quit",     'gtk-quit',        "_Quit",       "<control>Q", "Quit",       \&clean_quit        ],
        #[ "Grid_M",    undef,            "_Manual grid", undef,       "Manual",     \&manual_grid       ],
        #[ "Grid_A",    undef,            "_Auto grid",   undef,       "Auto",       \&auto_grid         ],
        #[ "Grid_L",    undef,            "_Auto all",    undef,       "Auto All",   \&auto_all          ],
        [ "About",    'gtk-about',       "_About",       undef,       "About",      \&show_about        ],
        [ "Prefs",    'gtk-preferences', "_Preferences", undef,       "Prefs",      \&edit_prefs        ],
        #[ "Zoom_In",  'gtk-zoom-in',     "_Zoom in",     undef,       "Zoom in",    sub{zoom(undef,ZI)} ],
        #[ "Zoom_Out", 'gtk-zoom-out',    "_Zoom out",    undef,       "Zoom out",   sub{zoom(undef,ZO)} ],
        #[ "Zoom_100", 'gtk-zoom-100',    "_Zoom 100%",   undef,       "Zoom 100%",  sub{zoom(undef,-1)} ],
        #[ "Zoom_Fit", 'gtk-zoom-fit',    "_Zoom to fit", undef,       "Zoom fit",   sub{zoom(undef,0)}  ],
    );
    my @toggle_actions = (
        [ "Show_Grid", undef,            "_Show grid",      undef,    "Show grid",      \&toggle_grid,      1 ],
        [ "HL_Used",   undef,            "_Highlight used", undef,    "Highlight used", \&toggle_highlight, 0 ],
    );

    my $actions = Gtk3::ActionGroup->new( "Actions" );
    $actions->add_actions( \@menu_actions, undef );
    $actions->add_toggle_actions( \@toggle_actions, undef );

    my $ui = Gtk3::UIManager->new;
    $ui->insert_action_group( $actions, 0 );
    $mw->add_accel_group( $ui->get_accel_group );
    $ui->add_ui_from_string( $embedded->{ui} );
    $vbox->pack_start( $ui->get_widget( "/MenuBar" ), FALSE, FALSE, 0 );

    # create toolbar
    # TODO convert toolbar below to use UIManager
    my $toolbar = Gtk3::Toolbar->new;
    $toolbar->set_show_arrow (TRUE);

    my $t_btn_first = Gtk3::ToolButton->new_from_stock('gtk-goto-first');
    my $t_btn_prev  = Gtk3::ToolButton->new_from_stock('gtk-go-back');
    my $t_btn_next  = Gtk3::ToolButton->new_from_stock('gtk-go-forward');
    my $t_btn_last  = Gtk3::ToolButton->new_from_stock('gtk-goto-last');
    my $t_entry = Gtk3::Entry->new();
    $t_entry->set_width_chars(7);
    my $t_item_entry = Gtk3::ToolItem->new();
    $t_item_entry->add( $t_entry );
    my $t_btn_go  = Gtk3::ToolButton->new_from_stock('gtk-ok');

    $t_btn_first->signal_connect('clicked' => \&change_spectrum, 'first' );
    $t_btn_prev->signal_connect( 'clicked' => \&change_spectrum, 'prev' );
    $t_btn_next->signal_connect( 'clicked' => \&change_spectrum, 'next' );
    $t_btn_last->signal_connect( 'clicked' => \&change_spectrum, 'last' );
    $t_btn_go->signal_connect(   'clicked' => sub {change_spectrum($t_btn_go, 'by_idx',
        $t_entry->get_text);} );
    $t_entry->signal_connect( 'key-release-event' => sub {
        if ($_[1]->keyval == 65293) {
            $t_btn_go->signal_emit('clicked');
        }
        #return TRUE;
    });

    $toolbar->insert($t_btn_first,-1);
    $toolbar->insert($t_btn_prev,-1);
    $toolbar->insert($t_btn_next,-1);
    $toolbar->insert($t_btn_last,-1);
    $toolbar->insert($t_item_entry,-1);
    $toolbar->insert($t_btn_go,-1);

    #my $sep = Gtk3::SeparatorToolItem->new;
    #$sep->set_draw(FALSE);
    #$sep->set_expand(TRUE);
    #$toolbar->insert($sep ,-1 );			

    $vbox->pack_start($toolbar,FALSE,FALSE,0);


    # create sidebar
    my $hpaned = Gtk3::HPaned->new();

    $main_canvas  = Gtk3::MassCanvas->new();
    $tic_canvas   = Gtk3::MassCanvas->new();
    $other_canvas = Gtk3::MassCanvas->new();

    $main_canvas->set_size_request(600,400);

    $tic_canvas->{cb_click} = \&cb_click;
    $tic_canvas->set_size_request(600,200);

    my $vpaned = Gtk3::VPaned->new();
    $vpaned->pack1($main_canvas, TRUE, TRUE);
    $vpaned->pack2($tic_canvas, FALSE, TRUE);
    $hpaned->pack1($vpaned, TRUE, FALSE);

    $other_canvas->set_size_request(200, 200);

    # create list
    $list = Gtk3::SimpleList->new(
        'SpectrumID' => 'text',
        'Peptide'    => 'text',
    );
    $list->signal_connect('row_activated' => sub {
        my ($l, $path, $col) = @_;
        my $row_ref = $l->get_row_data_from_path($path);
        my $id = $row_ref->[0];
        my $idx = $parser->spectrum_index_by_id( $id );
        my $scan = $parser->fetch_spectrum($idx);
        #load_scan($scan);
        change_spectrum(
            undef,
            'by_idx',
            $idx,
        );
    });
    my $sw = Gtk3::ScrolledWindow->new(undef,undef);
    $sw->set_policy('never','always');
    $sw->add($list);
    $sw->set_size_request(200, 400);


    my $vpaned_right = Gtk3::VPaned->new();
    $vpaned_right->pack1($other_canvas, TRUE, TRUE);
    $vpaned_right->pack2($sw, FALSE, TRUE);
    $hpaned->pack2($vpaned_right, TRUE, FALSE);

    $vbox->pack_end($hpaned, TRUE, TRUE, 0);

    #create statusbar
    my $status_bar = Gtk3::Statusbar->new;
    $status_bar->set_size_request(1,20);
    my $status_context_id = $status_bar->get_context_id('current_status');
    $status_bar->push($status_context_id,'idle');
    $gobjs->{status_bar} = $status_bar;
    $vbox->pack_end($status_bar, FALSE, FALSE, 0);

    $gobjs->{status_bar} = $status_bar;

    $vbox->show_all();
    $toolbar->set_style('icons');
    
    return $vbox;
    
}

sub load_scan {

    my ($scan) = @_;

    $other_canvas->remove_shading($ms1_hid) if (defined $ms1_hid);
    $other_canvas->remove_vline($xic_lid) if (defined $xic_lid);
    if ($scan->ms_level > 1) {
        $main_canvas->set_hard_limits(undef, undef);
        $main_canvas->load_spectrum($scan);
        my $pre_id = $scan->precursor->{scan_id};
        my $pre_idx = $parser->spectrum_index_by_id($pre_id);
        my $pre = $parser->fetch_spectrum($pre_idx);
        if (defined $pre) {
            $other_canvas->load_spectrum($pre);
            my $l = $scan->precursor->{iso_lower};
            my $r = $scan->precursor->{iso_upper};
            my $s = $r - $l;
            $other_canvas->zoom_to($l-$s,$r+$s);
            $other_canvas->fit_y();
            $ms1_hid = $other_canvas->add_shading( $l, $r, '#0000ff44', 'ms2 isolation' );
        }
        else {
            $other_canvas->clear();
        }
    }
    else {
        $main_canvas->set_hard_limits($mz_min, $mz_max);
        $main_canvas->load_spectrum($scan);
        $other_canvas->clear();
    }

}

sub change_spectrum {

    my ($w,$cmd,$idx) = @_;
    if (defined $parser) {
        my $scan_idx;
        for ($cmd) {
            if    ( /first/ ) { $scan_idx = 0 }
            elsif ( /prev/  ) { $scan_idx = $parser->curr_spectrum_index - 1 }
            elsif ( /next/  ) { $scan_idx = $parser->curr_spectrum_index + 1 }
            elsif ( /last/  ) { $scan_idx = $parser->n_spectra - 1 }
            elsif ( /by_idx/) { $scan_idx = $idx }
            else              { die "Bad navigation command: $cmd\n" }
        }
        return if (! defined $scan_idx);
        my $scan = $parser->fetch_spectrum($scan_idx );
        $parser->goto_spectrum( $scan_idx );
        load_scan( $scan );
        if (defined $mods{ $scan->id }) {
            annotate($scan);
        }
    }

}


sub show_about {

    my $dialog = Gtk3::AboutDialog->new;
    $dialog->set_program_name( $NAME );
    $dialog->set_version( $VERSION );
    $dialog->set_copyright( chr(169) . " 2015-" . localtime()->year . " Jeremy Volkening" );
    $dialog->set_comments('A simple viewer of MS/MS experimental data');
    $dialog->set_authors(['Jeremy Volkening']);
    $dialog->set_wrap_license(TRUE);
    $dialog->set_license(
        "$NAME is free software: you can redistribute it and/or modify" .
        ' it under the terms of the GNU General Public License as published' .
        ' by the Free Software Foundation, either version 2 of the License,' .
        " or (at your option) any later version.\n\n" .

        "$NAME is distributed in the hope that it will be useful, " .
        'but WITHOUT ANY WARRANTY; without even the implied warranty of ' .
        'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ' .
        "GNU General Public License for more details.\n\n" .

        'You should have received a copy of the GNU General Public License ' .
        'along with this program.  If not, see http://www.gnu.org/licenses/.'
    );
    $dialog->set_logo_icon_name('logo');
    $dialog->run;
    $dialog->destroy;
    return 0;

}

sub get_embedded {

    my $embedded = {};

    my %encoded = (
        B2B_16   => $ms2view::Embed::icon_B2B_16,
        ch_w     => $ms2view::Embed::icon_ch_white,
        ch_g     => $ms2view::Embed::icon_ch_green,
        icon_16  => $ms2view::Embed::logo_16,
        icon_24  => $ms2view::Embed::logo_24,
        icon_32  => $ms2view::Embed::logo_32,
        icon_48  => $ms2view::Embed::logo_48,
        icon_64  => $ms2view::Embed::logo_64,
    );
    my %unencoded = (
        ui          => $ms2view::Embed::ui,
    );

    for (keys %encoded) {
        $embedded->{$_} = do {
            my $loader = Gtk3::Gdk::PixbufLoader->new();
            my $img_data = decode_base64($encoded{$_});
            $loader->write( [unpack 'C*', $img_data] );
            $loader->close;
            $loader->get_pixbuf();
        };
    }
    for (keys %unencoded) {
        $embedded->{$_} = $unencoded{$_};
    }
    return $embedded;

}

sub get_filename {

    my ( $heading, $type,) = @_;

    my $file_chooser =  Gtk3::FileChooserDialog->new( 
        $heading,
        $mw,
        $type,
        'gtk-cancel' => 'cancel',
        'gtk-ok' => 'ok'
    );

    # since we are auto-adding the correct suffix if missing, we need to
    # manually handle the overwrite confirmation and check the filename
    # with suffix added as well
    #if ($type eq 'save') {
        #$file_chooser->set_do_overwrite_confirmation(TRUE);
    #}

    my $filename;
    if ('ok' eq $file_chooser->run){    
        $filename = $file_chooser->get_filename;
        # automatic overwrite confirmation doesn't work when we add a suffix
        # aftwards like this, so the feature is currently disabled
        # TODO: implement custom overwrite confirmation dialog to fix this
        #if ($type eq 'save' && $filename !~ /\.pair$/i) {
            #$filename .= '.pair';
        #}
    }
    $file_chooser->destroy;
    return $filename;

}

sub annotate {

   my ($scan) = @_;

   my $id_use   = $scan->id;

   my $mz  = $scan->mz;
   my $int = $scan->int;
   my @sort = sort {$b <=> $a} @$int;
   #my $cutoff = $sort[49];
   #my $cutoff = $int[ int(scalar(@int)*5/6) ]; # roughly Q3
   my $cutoff = 0.;
   my $id = $scan->id;
   my $mods = $mods{$id_use};
   my $z = $charges{$id_use};
   my $pep  = $peptides{$id_use};
   my @frags = calc_fragments(uc($pep), $mods, $z);
   print join(" ",@{$_})."\n" for (@frags);
   my %matches;
   for my $i (0..$#{$mz}) {
        next if ($int->[$i] < $cutoff); # only label major peaks
        THEO:
        for my $theo (@frags) {
            my $diff = $mz->[$i] - $theo->[0];
            my $tol = $tol_type eq 'amu' ? $ms2_tol
                    : $tol_type eq 'ppm' ? $ms2_tol/1000000*$mz->[$i]
                    : die "Bad --tol_type given: $tol_type\n";
            next THEO if (abs($diff) > $tol);
            next THEO if ( defined $matches{$theo->[0]}
                && $matches{$theo->[0]}->{int} > $int->[$i]);
            my $col_idx = $theo->[1] =~ /^[abc]/ ? 1 : 2;
            my $lab = "$theo->[1]";
            $lab .= "<sub>$theo->[2]</sub>";
            $lab .= "<sup>$theo->[3]+</sup>" if ($theo->[3] > 1);
            my $extra = $theo->[4];
            if (defined $extra) {
                $extra =~ s/[A-Za-z]\K(\d+)/<sub>$1<\/sub>/g;
                $lab .= $extra;
            }
            $matches{$theo->[0]}->{int} = $int->[$i];
            $matches{$theo->[0]}->{entry} = [$i, $lab, $col_idx, $theo->[3], $theo->[4]];
        }
    }
    my @labels = map {$matches{$_}->{entry}} keys %matches;
    #for (@labels) {
        #my ($i, $lab, $col) = @$_;
        #my $m = $mz->[$i];
    #}
    $main_canvas->label(@labels);

    my @chars = split '', $pep;
    my @str = ('C-t', (map {$chars[$_] . $_} 0..$#chars), 'N-t');
    for (0..$#${mods}) {
        if ($mods->[$_] =~ /^[\-\d\.]+$/) {
            $mods->[$_] = sprintf '%.3f', $mods->[$_];
        }
    }
    my $mod_string = join('; ', (map {$str[$_] . "($mods->[$_])"} grep
    {$mods->[$_] != 0} 0..$#{$mods}));
    $main_canvas->{subtitle} = "$pep [$mod_string] [$z+]";

    $main_canvas->set_peptide($pep);

}


__END__

=head1 NAME

ms2view - a simple mass spectrum viewer with vim-like bindings

=head1 SYNOPSIS

ms2view --raw <input.mzML> [--pepxml ids.pepxml ...etc...]

=head1 DESCRIPTION

B<ms2view> is a simple viewer for tandem mass spectrometry data. It combines
an overview of an LC-MS/MS run with display of individual MS1 and MS2 spectra.
It can also show and annotate peptide spectral matches based on pepXML or
tab-delimited input.

While navigation can be done using a mouse, there is also a set of vim-like
keybindings to allow quick navigation via the keyboard. The supported bindings
are described below.

=head1 PREREQUISITES

Requires the following non-core Perl libraries:

=over 1

=item * Gtk3

=item * Gtk3::SimpleList

=item * MS

=back

=head1 COMMAND-LINE OPTIONS

=over 4

=item B<--raw> I<filename>

Path to input mzML file (required)

=item B<--pepxml> I<filename>

Path to input pepXML containing spectral IDS for the corresponding mzML

=item B<--ids> I<filename>

Path to input tab-separated table  containing spectral IDS for the corresponding mzML

=item B<--hardklor>

Path to Hardklor output file containing peptide features for the corresponding
mzML (NOTE: this feature is currently unimplemented)

=back

=head1 KEY BINDINGS

The following keybindings are enabled:

=over 4

=item C<tab> switch focus between three main canvases

=item C<h> C<l> move peak selection left and right respectively (if the overview
    panel is in focus, this will move to the next MS1 scan and load it in the
    spectrum window)

=item C<H> C<L> zoom canvas out and in on x-axis (zoom centers on currently
    selected peak)

=item C<J> C<K> zoom canvas out and in on y-axis

=item C<<number>g> center the canvas at the m/z coordinate given by `<number>`

=item C<s> save the currently focused canvas as PNG (will prompt for filename)

=back

=head1 MOUSE NAVIGATION

The following mouse actions are supported on each spectrum canvas:

=over 4

=item C<left-click> change the current peak selection. The selected peak will be
    the one with apex closest to the click point in Euclidean space.

=item C<shift+left-click> drag to select a window and add an m/z label to the most
    intense peak in the selected window

=item C<ctrl+left-click> drag from near the apex of one peak to the apex and
    another to display an on-screen ruler of the horizontal distance in m/z

=item C<right-click> drag to move canvas view horizontally

=item C<scroll-wheel> change x-axis zoom

=item C<ctrl+scroll-wheel> change y-axis zoom

=back

=head1 CAVEATS AND BUGS

Please submit bug reports to the issue tracker in the distribution repository.

=head1 AUTHOR

Jeremy Volkening

=head1 LICENSE AND COPYRIGHT

Copyright 2014-24 Jeremy Volkening

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

