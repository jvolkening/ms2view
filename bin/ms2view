#!/usr/bin/perl

#############################################################################
# embedded files
#############################################################################

package ms2view::Embed;

$ui = <<XML;
<ui>
  <menubar name="MenuBar">
    <menu name="FileMenu" action="FileMenu">
      <!--
      <menuitem name="Load_I" action="Load_I" />
      <menuitem name="Load_N" action="Load_N" />
      <menuitem name="Save" action="Save" />
      <separator />
      -->
      <menuitem name="Quit" action="Quit" />
    </menu>
    <menu name="EditMenu" action="EditMenu">
      <!--
      <menuitem name="Grid_M" action="Grid_M"/>
      <menuitem name="Grid_A" action="Grid_A"/>
      <menuitem name="Grid_L" action="Grid_L"/>
      <separator />
      -->
      <menuitem name="Prefs" action="Prefs" />
    </menu>
    <menu name="ViewMenu" action="ViewMenu">
      <!--
      <menuitem name="Show_Grid" action="Show_Grid"/>
      <menuitem name="HL_Used" action="HL_Used"/>
      <separator />
      <menuitem name="Zoom_In" action="Zoom_In"/>
      <menuitem name="Zoom_Out" action="Zoom_Out"/>
      <menuitem name="Zoom_Fit" action="Zoom_Fit"/>
      <menuitem name="Zoom_100" action="Zoom_100"/>
      -->
    </menu>
    <menu name="HelpMenu" action="HelpMenu">
      <menuitem name="About" action="About"/>
    </menu>
  </menubar>
</ui>
XML

$icon_B2B_16 = <<PNG;
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz
AAAN1wAADdcBQiibeAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAADASURB
VDiNpZPBDYMwDEWf067TLsClR3Yoc/SKI3FiDtihC7AAnYYDuBdaEZpIFL5kyZKTp287ETPjqBSw
naEyJ7t1Brg/ntHiq2vouwZVpSzLoOa9R1URwFKAJSQ2KxEh2cI1K7hkBQBtnX8BIhLkDsDMglBV
+q6JOlo7cbFD637XtpOAdfFvB/88qqqqgHmNSwcpiHMuiGEYfgGpy6k1t3UeH+LH3hYJYCIStbdF
pxlyMzOmaWIcx82XAS9Hv/MbCXls+cixbw4AAAAASUVORK5CYII=
PNG

$icon_ch_white = <<PNG;
iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAAAXNSR0IArs4c6QAAAAZiS0dEAAAA
AAAA+UO7fwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB90EFxMwAJscR20AAAAZdEVYdENv
bW1lbnQAQ3JlYXRlZCB3aXRoIEdJTVBXgQ4XAAAALUlEQVQ4y2NgIAD+////n5AaJgYqgFFDBrMh
jITSASMjIyMxaWU0sY0aQggAAMpCEBLL4xSxAAAAAElFTkSuQmCC
PNG

$icon_ch_green = <<PNG;
iVBORw0KGgoAAAANSUhEUgAAABEAAAARCAYAAAA7bUf6AAAABmJLR0QA/wD/AP+gvaeTAAAACXBI
WXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3gEUFQwjEsRhYgAAABl0RVh0Q29tbWVudABDcmVhdGVk
IHdpdGggR0lNUFeBDhcAAAAtSURBVDjLY2AgACL+y24mpIaJgQpg1JDBbAgjoXSwgvGxLzFpZTSx
jRpCCAAAiWsKk6T5wbEAAAAASUVORK5CYII=
PNG

package main;

use strict;
use warnings;
use 0.512;

use FindBin;
use Getopt::Long;
use Gtk2 '-init';
use Glib qw(TRUE FALSE);
use Gtk2::SimpleList;
use List::Util;
use MIME::Base64 qw/decode_base64/;
use Time::Piece;

use MS::Reader::MzML;
use MS::Reader::PepXML;
use MS::PepInfo qw/calc_fragments/;
use MS::CV qw/:MS/;

use lib $FindBin::Bin;
use Gtk2::MassCanvas;

# constants
use constant ZI => 1.25;
use constant ZO => 0.80;

# globals
my $NAME    = 'ms2view';
my $VERSION = '0.003';

my $gobjs   = {};
my $embedded = get_embedded();

my $fn_raw;
my $fn_ids;
my $fn_pepxml;
my $fn_hardklor;
my $guess_spectrum_id = 0;
my $fdr;

GetOptions(
    'raw=s'      => \$fn_raw,
    'pepxml=s'   => \$fn_pepxml,
    'ids=s'      => \$fn_ids,
    'hardklor=s' => \$fn_hardklor,
    'guess_ids'  => \$guess_spectrum_id,
    'fdr=f'      => \$fdr,
);

my $parser = MS::Reader::MzML->new;
my $pep_p  = MS::Reader::PepXML->new();

my $main_canvas;
my $tic_canvas;
my $other_canvas;
my $list;
my $ms1_hid;
my $xic_lid;
my %mods;
my %charges;
my %peptides;
my $mz_min;
my $mz_max;
my $tic;
my $bpc;

# initialize GUI
my $mw = _build_ui();

if (defined $fn_raw) {
   
    $parser->load( $fn_raw );

    $mz_min = $parser->get_app_data($NAME, 'mz_min');
    $mz_max = $parser->get_app_data($NAME, 'mz_max');

    if (! defined $mz_min || ! defined $mz_max) {

        while (my $s = $parser->next_spectrum(filter => [MS_MS_LEVEL, 1])) {

            my $low  = $s->param(MS_LOWEST_OBSERVED_M_Z);
            my $high = $s->param(MS_HIGHEST_OBSERVED_M_Z);

            if (! defined $low || ! defined $high) {
                my $mz = $s->mz;
                $low  = $mz->[0];
                $high = $mz->[-1];
            }

            $mz_min = $low  if (! defined $mz_min || $low  < $mz_min);
            $mz_max = $high if (! defined $mz_max || $high > $mz_max);

        }

        $parser->set_app_data($NAME, 'mz_min' => $mz_min);
        $parser->set_app_data($NAME, 'mz_max' => $mz_max);

    }

    $parser->goto_spectrum(0);
    my $scan = $parser->fetch_spectrum(0);
    load_scan( $scan );

    $tic = $parser->get_app_data($NAME, 'tic');
    $bpc = $parser->get_app_data($NAME, 'bpc');

    if (! defined $tic) {
        $tic = MS::Reader::MzML::Chromatogram->new(type => 'tic', raw => $parser);
        $parser->set_app_data($NAME, 'tic' => $tic);
    }
    if (! defined $bpc) {
        $bpc = MS::Reader::MzML::Chromatogram->new(type => 'bpc', raw => $parser);
        $parser->set_app_data($NAME, 'bpc' => $bpc);
    }
    $tic_canvas->load_chrom($tic);
}
if (defined $fn_pepxml) {
    load_list( $fn_pepxml );
}
elsif (defined $fn_ids) {
    load_list( $fn_ids, 1 );
}
Gtk2->main;




#----------------------------------------------------------------------------#
# SUBROUTINES
#----------------------------------------------------------------------------#

sub cb_click {

    my ($i,$val) = @_;
    my $idx = $parser->find_by_time($val => 1);
    my $scan = $parser->fetch_spectrum($idx);
    $parser->goto_spectrum($idx);
    $tic_canvas->{title} = "clicked $val";
    load_scan($scan);

}

sub load_list {

    my ($fn, $is_tsv) = @_;
    return if (! defined $fn);
    my %seen;
    %mods = ();
    %charges = ();
    %peptides = ();
    if ($is_tsv) {
        open my $in, '<', $fn;
        PSM:
        while (my $line = <$in>) {
            chomp $line;
            my (
                $id,
                $pre,
                $pep_mod,
                $pep,
                $mz,
                $score,
                $n_match,
                $p,
                $z,
                $mod_string,
            ) = split "\t", $line;
            next PSM if (defined $fdr && $score > $fdr);
            my @m = split ',', $mod_string;
            $mods{$id}     = \@m;
            $charges{$id}  = $z;
            $peptides{$id} = $pep;
            push @{$list->{data}}, [$id,$pep];
        }
    }
    else {
        $pep_p->load($fn);

        for (0..$pep_p->n_lists()-1) {

            $pep_p->goto_list($_);

            PSM:
            while (my $spectrum = $pep_p->next_result) {
                my $z    = $spectrum->{assumed_charge};
                my $scan = $spectrum->{start_scan};
                my $id   = $spectrum->{spectrumNativeID};

                # if native ID not defined, either guess or use scan number
                $id //= $guess_spectrum_id
                    ? "controllerType=0 controllerNumber=1 scan=$scan"
                    : $scan;

                my $hit = $spectrum->get_hit(0);
                if (defined $hit) {
                    my $pep = $hit->{peptide};
                    my $q   = $hit->{search_score}->{percolator_qvalue}->{value}
                        // 1;
                    next PSM if (defined $fdr && $q > $fdr);
                    my $m = $spectrum->mod_delta_array;
                    $mods{$id}     = $m;
                    $charges{$id}  = $z;
                    $peptides{$id} = $pep;
                    push @{$list->{data}}, [$id,$pep];
                }
            }
        }
    }
}


sub clean_quit {

    Gtk2->main_quit;
    return FALSE;
    
}

sub _build_ui {

    # set up the main window
    my $mw = Gtk2::Window->new('toplevel');
    $mw->set_title("$NAME v$VERSION");
    $mw->signal_connect('delete_event' => \&clean_quit );
    $mw->set_default_size(900, 500);
    $mw->set_default_icon_list($embedded->{B2B_16});

    # add custom icons
    my $theme = Gtk2::IconTheme->get_default;

    # build menubar and toolbar
    my $vbox_main = _return_framework($mw);
    
    # Next we put together the main content
    $mw->add($vbox_main);

    $mw->signal_connect( 'key-release-event' => sub {
        
        if ($_[1]->keyval == 98) { # 'b'
            $tic_canvas->load_chrom($bpc);
        }
        elsif ($_[1]->keyval == 116) { # 't'
            $tic_canvas->load_chrom($tic);

        }
        elsif ($_[1]->keyval == 115) { # 's'
            my $fn = get_filename('Select location to save PNG', 'save');
            $mw->get_focus()->save_to_png($fn)
                if ($fn);
        }
        elsif ($_[1]->keyval == 65289) { # 'TAB'
            my @can = ($tic_canvas, $main_canvas, $other_canvas);
            for (0..$#can) {
                if ($can[$_]->has_focus()) {
                    my $new_focus = $can[ ($_+1)%3 ];
                    $mw->set_focus($new_focus);
                    last;
                }
            }
            $tic_canvas->load_chrom($tic);

        }
        elsif ($_[1]->keyval == 65056) { # 'Shift-TAB'
            my @can = ($tic_canvas, $main_canvas, $other_canvas);
            for (0..$#can) {
                if ($can[$_]->has_focus()) {
                    my $new_focus = $can[ ($_+2)%3 ];
                    $mw->set_focus($new_focus);
                    last;
                }
            }
            $tic_canvas->load_chrom($tic);

        }
            #$t_btn_go->signal_emit('clicked');
        #}
        #return TRUE;
    });

    $mw->show_all();
    return $mw;
    
}

sub _return_framework {

    my $mw = shift;


    my $vbox = Gtk2::VBox->new(FALSE,0);
    
    # define menu structure
    my @menu_actions = (
        # name         stock id           label
        [ "FileMenu",  undef,            "_File" ],
        [ "EditMenu",  undef,            "_Edit" ],
        [ "ViewMenu",  undef,            "_View" ],
        [ "HelpMenu",  undef,            "_Help" ],
        # name         stock id           label          accelerator   tooltip      callback
        #[ "Load_I",   'gtk-open',        "_Load image", "<control>O", "Load image", sub{_load_image()}  ],
        #[ "Load_N",   'gtk-open',        "_Load NDF",    undef,       "Load NDF",   sub{ _load_ndf()}   ],
        #[ "Save",      undef,            "_Save .pair",  undef,       "Save",       \&print_pair        ],
        [ "Quit",     'gtk-quit',        "_Quit",       "<control>Q", "Quit",       \&clean_quit        ],
        #[ "Grid_M",    undef,            "_Manual grid", undef,       "Manual",     \&manual_grid       ],
        #[ "Grid_A",    undef,            "_Auto grid",   undef,       "Auto",       \&auto_grid         ],
        #[ "Grid_L",    undef,            "_Auto all",    undef,       "Auto All",   \&auto_all          ],
        [ "About",    'gtk-about',       "_About",       undef,       "About",      \&show_about        ],
        [ "Prefs",    'gtk-preferences', "_Preferences", undef,       "Prefs",      \&edit_prefs        ],
        #[ "Zoom_In",  'gtk-zoom-in',     "_Zoom in",     undef,       "Zoom in",    sub{zoom(undef,ZI)} ],
        #[ "Zoom_Out", 'gtk-zoom-out',    "_Zoom out",    undef,       "Zoom out",   sub{zoom(undef,ZO)} ],
        #[ "Zoom_100", 'gtk-zoom-100',    "_Zoom 100%",   undef,       "Zoom 100%",  sub{zoom(undef,-1)} ],
        #[ "Zoom_Fit", 'gtk-zoom-fit',    "_Zoom to fit", undef,       "Zoom fit",   sub{zoom(undef,0)}  ],
    );
    my @toggle_actions = (
        [ "Show_Grid", undef,            "_Show grid",      undef,    "Show grid",      \&toggle_grid,      1 ],
        [ "HL_Used",   undef,            "_Highlight used", undef,    "Highlight used", \&toggle_highlight, 0 ],
    );

    my $actions = Gtk2::ActionGroup->new( "Actions" );
    $actions->add_actions( \@menu_actions, undef );
    $actions->add_toggle_actions( \@toggle_actions, undef );

    my $ui = Gtk2::UIManager->new;
    $ui->insert_action_group( $actions, 0 );
    $mw->add_accel_group( $ui->get_accel_group );
    $ui->add_ui_from_string( $embedded->{ui} );
    $vbox->pack_start( $ui->get_widget( "/MenuBar" ), FALSE, FALSE, 0 );

    # create toolbar
    # TODO convert toolbar below to use UIManager
    my $toolbar = Gtk2::Toolbar->new;
    $toolbar->set_show_arrow (TRUE);

    my $t_btn_first = Gtk2::ToolButton->new_from_stock('gtk-goto-first');
    my $t_btn_prev  = Gtk2::ToolButton->new_from_stock('gtk-go-back');
    my $t_btn_next  = Gtk2::ToolButton->new_from_stock('gtk-go-forward');
    my $t_btn_last  = Gtk2::ToolButton->new_from_stock('gtk-goto-last');
    my $t_entry = Gtk2::Entry->new();
    $t_entry->set_width_chars(7);
    my $t_item_entry = Gtk2::ToolItem->new();
    $t_item_entry->add( $t_entry );
    my $t_btn_go  = Gtk2::ToolButton->new_from_stock('gtk-ok');

    $t_btn_first->signal_connect('clicked' => \&change_spectrum, 'first' );
    $t_btn_prev->signal_connect( 'clicked' => \&change_spectrum, 'prev' );
    $t_btn_next->signal_connect( 'clicked' => \&change_spectrum, 'next' );
    $t_btn_last->signal_connect( 'clicked' => \&change_spectrum, 'last' );
    $t_btn_go->signal_connect(   'clicked' => sub {change_spectrum($t_btn_go, 'by_idx',
        $t_entry->get_text);} );
    $t_entry->signal_connect( 'key-release-event' => sub {
        if ($_[1]->keyval == 65293) {
            $t_btn_go->signal_emit('clicked');
        }
        #return TRUE;
    });

    $toolbar->insert($t_btn_first,-1);
    $toolbar->insert($t_btn_prev,-1);
    $toolbar->insert($t_btn_next,-1);
    $toolbar->insert($t_btn_last,-1);
    $toolbar->insert($t_item_entry,-1);
    $toolbar->insert($t_btn_go,-1);

    #my $sep = Gtk2::SeparatorToolItem->new;
    #$sep->set_draw(FALSE);
    #$sep->set_expand(TRUE);
    #$toolbar->insert($sep ,-1 );			

    $vbox->pack_start($toolbar,FALSE,FALSE,0);


    # create sidebar
    my $hpaned = Gtk2::HPaned->new();

    $main_canvas  = Gtk2::MassCanvas->new();
    $tic_canvas   = Gtk2::MassCanvas->new();
    $other_canvas = Gtk2::MassCanvas->new();

    $main_canvas->set_size_request(600,400);

    $tic_canvas->{cb_click} = \&cb_click;
    $tic_canvas->set_size_request(600,200);

    my $vpaned = Gtk2::VPaned->new();
    $vpaned->pack1($main_canvas, TRUE, TRUE);
    $vpaned->pack2($tic_canvas, FALSE, TRUE);
    $hpaned->pack1($vpaned, TRUE, FALSE);

    $other_canvas->set_size_request(200, 200);

    # create list
    $list = Gtk2::SimpleList->new(
        'SpectrumID' => 'text',
        'Peptide'    => 'text',
    );
    $list->signal_connect('row_activated' => sub {
        my ($l, $path, $col) = @_;
        my $row_ref = $l->get_row_data_from_path($path);
        my $id = $row_ref->[0];
        my $idx = $parser->spectrum_index_by_id( $id );
        my $scan = $parser->fetch_spectrum($idx);
        #load_scan($scan);
        change_spectrum(
            undef,
            'by_idx',
            $idx,
        );
    });
    my $sw = Gtk2::ScrolledWindow->new(undef,undef);
    $sw->set_policy('never','always');
    $sw->add($list);
    $sw->set_size_request(200, 400);


    my $vpaned_right = Gtk2::VPaned->new();
    $vpaned_right->pack1($other_canvas, TRUE, TRUE);
    $vpaned_right->pack2($sw, FALSE, TRUE);
    $hpaned->pack2($vpaned_right, TRUE, FALSE);

    $vbox->pack_end($hpaned, TRUE, TRUE, 0);

    #create statusbar
    my $status_bar = Gtk2::Statusbar->new;
    $status_bar->set_size_request(1,20);
    my $status_context_id = $status_bar->get_context_id('current_status');
    $status_bar->push($status_context_id,'idle');
    $gobjs->{status_bar} = $status_bar;
    $vbox->pack_end($status_bar, FALSE, FALSE, 0);

    $gobjs->{status_bar} = $status_bar;

    $vbox->show_all();
    $toolbar->set_style('icons');
    
    return $vbox;
    
}

sub load_scan {

    my ($scan) = @_;

    $other_canvas->remove_shading($ms1_hid) if (defined $ms1_hid);
    $other_canvas->remove_vline($xic_lid) if (defined $xic_lid);
    if ($scan->ms_level > 1) {
        $main_canvas->set_hard_limits(undef, undef);
        $main_canvas->load_spectrum($scan);
        my $pre_id = $scan->precursor->{scan_id};
        my $pre_idx = $parser->spectrum_index_by_id($pre_id);
        my $pre = $parser->fetch_spectrum($pre_idx);
        if (defined $pre) {
            $other_canvas->load_spectrum($pre);
            my $l = $scan->precursor->{iso_lower};
            my $r = $scan->precursor->{iso_upper};
            my $s = $r - $l;
            $other_canvas->zoom_to($l-$s,$r+$s);
            $other_canvas->fit_y();
            $ms1_hid = $other_canvas->add_shading( $l, $r, '#0000ff44', 'ms2 isolation' );
        }
        else {
            $other_canvas->clear();
        }
    }
    else {
        $main_canvas->set_hard_limits($mz_min, $mz_max);
        $main_canvas->load_spectrum($scan);
        $other_canvas->clear();
    }

}

sub change_spectrum {

    my ($w,$cmd,$idx) = @_;
    if (defined $parser) {
        my $scan_idx;
        for ($cmd) {
            if    ( /first/ ) { $scan_idx = 0 }
            elsif ( /prev/  ) { $scan_idx = $parser->curr_spectrum_index - 1 }
            elsif ( /next/  ) { $scan_idx = $parser->curr_spectrum_index + 1 }
            elsif ( /last/  ) { $scan_idx = $parser->n_spectra - 1 }
            elsif ( /by_idx/) { $scan_idx = $idx }
            else              { die "Bad navigation command: $cmd\n" }
        }
        return if (! defined $scan_idx);
        my $scan = $parser->fetch_spectrum($scan_idx );
        $parser->goto_spectrum( $scan_idx );
        load_scan( $scan );
        if (defined $mods{ $scan->id }) {
            annotate($scan);
        }
    }

}


sub show_about {

    my $dialog = Gtk2::AboutDialog->new;
    $dialog->set_program_name( $NAME );
    $dialog->set_version( $VERSION );
    $dialog->set_copyright( chr(169) . " 2015-" . localtime()->year . " Jeremy Volkening" );
    $dialog->set_comments('ms2view is a simple view of MS/MS experimental data');
    $dialog->set_authors('Jeremy Volkening');
    $dialog->set_wrap_license(TRUE);
    $dialog->set_license(
        "$NAME is free software: you can redistribute it and/or modify" .
        ' it under the terms of the GNU General Public License as published' .
        ' by the Free Software Foundation, either version 2 of the License,' .
        " or (at your option) any later version.\n\n" .

        "$NAME is distributed in the hope that it will be useful, " .
        'but WITHOUT ANY WARRANTY; without even the implied warranty of ' .
        'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the ' .
        "GNU General Public License for more details.\n\n" .

        'You should have received a copy of the GNU General Public License ' .
        'along with this program.  If not, see http://www.gnu.org/licenses/.'
    );
    $dialog->set_logo( $embedded->{chip} );
    $dialog->run;
    $dialog->destroy;
    return 0;

}

sub get_embedded {

    my $embedded = {};

    my %encoded = (
        B2B_16      => $ms2view::Embed::icon_B2B_16,
        ch_w        => $ms2view::Embed::icon_ch_white,
        ch_g        => $ms2view::Embed::icon_ch_green,
    );
    my %unencoded = (
        ui          => $ms2view::Embed::ui,
    );

    for (keys %encoded) {
        $embedded->{$_} = do {
            my $loader = Gtk2::Gdk::PixbufLoader->new();
            $loader->write( decode_base64( $encoded{$_} ) );
            $loader->close;
            $loader->get_pixbuf();
        };
    }
    for (keys %unencoded) {
        $embedded->{$_} = $unencoded{$_};
    }
    return $embedded;

}

sub get_filename {

    my ( $heading, $type,) = @_;

    my $file_chooser =  Gtk2::FileChooserDialog->new( 
        $heading,
        $mw,
        $type,
        'gtk-cancel' => 'cancel',
        'gtk-ok' => 'ok'
    );

    # since we are auto-adding the correct suffix if missing, we need to
    # manually handle the overwrite confirmation and check the filename
    # with suffix added as well
    #if ($type eq 'save') {
        #$file_chooser->set_do_overwrite_confirmation(TRUE);
    #}

    my $filename;
    if ('ok' eq $file_chooser->run){    
        $filename = $file_chooser->get_filename;
        # automatic overwrite confirmation doesn't work when we add a suffix
        # aftwards like this, so the feature is currently disabled
        # TODO: implement custom overwrite confirmation dialog to fix this
        #if ($type eq 'save' && $filename !~ /\.pair$/i) {
            #$filename .= '.pair';
        #}
    }
    $file_chooser->destroy;
    return $filename;

}

sub annotate {

   my ($scan) = @_;

   my $id_use   = $scan->id;

   my $mz  = $scan->mz;
   my $int = $scan->int;
   my @sort = sort {$b <=> $a} @$int;
   #my $cutoff = $sort[49];
   #my $cutoff = $int[ int(scalar(@int)*5/6) ]; # roughly Q3
   my $cutoff = 0.;
   my $id = $scan->id;
   my $mods = $mods{$id_use};
   my $z = $charges{$id_use};
   my $pep  = $peptides{$id_use};
   my @frags = calc_fragments(uc($pep), $mods, $z);
   print join(" ",@{$_})."\n" for (@frags);
   my %matches;
   for my $i (0..$#{$mz}) {
        next if ($int->[$i] < $cutoff); # only label major peaks
        THEO:
        for my $theo (@frags) {
            my $diff = $mz->[$i] - $theo->[0];
            next THEO if (abs($diff) > 0.5);
            next THEO if ( defined $matches{$theo->[0]}
                && $matches{$theo->[0]}->{int} > $int->[$i]);
            my $col_idx = $theo->[1] =~ /^[abc]/ ? 1 : 2;
            my $lab = "$theo->[1]";
            $lab .= "<sub>$theo->[2]</sub>";
            $lab .= "<sup>$theo->[3]+</sup>" if ($theo->[3] > 1);
            my $extra = $theo->[4];
            if (defined $extra) {
                $extra =~ s/[A-Za-z]\K(\d+)/<sub>$1<\/sub>/g;
                $lab .= $extra;
            }
            $matches{$theo->[0]}->{int} = $int->[$i];
            $matches{$theo->[0]}->{entry} = [$i, $lab, $col_idx, $theo->[3], $theo->[4]];
        }
    }
    my @labels = map {$matches{$_}->{entry}} keys %matches;
    #for (@labels) {
        #my ($i, $lab, $col) = @$_;
        #my $m = $mz->[$i];
    #}
    $main_canvas->label(@labels);

    my @chars = split '', $pep;
    my @str = ('C-t', (map {$chars[$_] . $_} 0..$#chars), 'N-t');
    for (0..$#${mods}) {
        if ($mods->[$_] =~ /^[\-\d\.]+$/) {
            $mods->[$_] = sprintf '%.3f', $mods->[$_];
        }
    }
    my $mod_string = join('; ', (map {$str[$_] . "($mods->[$_])"} grep
    {$mods->[$_] != 0} 0..$#{$mods}));
    $main_canvas->{subtitle} = "$pep [$mod_string] [$z+]";

    $main_canvas->set_peptide($pep);

}


__END__

=head1 NAME

ms2view - a simple mass spectrum viewer

=head1 SYNOPSIS

ms2view --raw <input.mzML> [--pepxml ids.pepxml --hardklor peptides.hk]

=head1 DESCRIPTION

B<ms2view> is a simple viewer for tandem mass spectrometry data. At its
simplest it combines an overview of an LC-MS/MS run along with individual MS1
and MS2 spectra. It can also show and annotate peptide spectral matches based
on a pepXML input as well as highlight peptide features detected by the
Hardklor program.

=head1 PREREQUISITES

Requires the following non-core Perl libraries:

=over 1

=item * Gtk2

=item * Gtk2::SimpleList

=item * MS

=back

=head1 OPTIONS

=over 4

=item B<--raw> I<filename>

Path to input mzML file (required)

=item B<--pepxml> I<filename>

Path to input pepXML containing spectral IDS for the corresponding mzML

=item B<--ids> I<integer>

Path to input tab-separated table  containing spectral IDS for the corresponding mzML

=item B<--hardklor>

Path to Hardklor output file containing peptide features for the corresponding
mzML (NOTE: this feature is currently unimplemented)

=back

=head1 CAVEATS AND BUGS

Please submit bug reports to the issue tracker in the distribution repository.

=head1 AUTHOR

Jeremy Volkening (jdv@base2bio.com)

=head1 LICENSE AND COPYRIGHT

Copyright 2014-17 Jeremy Volkening

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

